// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Active
  Inactive
  Restricted
  Blocked
  Deleted
}

enum Status {
  Active
  Inactive
}

model AuthClients {
  id                     String @id @default(uuid())
  name                   String @db.VarChar(255)
  secrate                String @db.VarChar(255)
  accessTokenExpiration  String @db.VarChar(10)
  refreshTokenExpiration String @db.VarChar(10)

  createdOn  DateTime @default(now())
  modifiedBy String?  @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique
}

model Tenant {
  id      String  @id @default(uuid())
  name    String  @db.VarChar(255)
  status  Status  @default(Active)
  website String? @db.VarChar(255)
  logoUrl String? @db.VarChar(255)
  address String? @db.VarChar(255)
  city    String? @db.VarChar(255)
  state   String? @db.VarChar(255)
  zip     String? @db.VarChar(255)

  createdOn  DateTime @default(now())
  modifiedBy String?  @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  users     User[]
  auth      AuthClients?
  employees Employee[]
}

model Role {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)

  createdOn  DateTime @default(now())
  modifiedBy String?  @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  users User[]
}

model User {
  id         String     @id @default(uuid())
  status     UserStatus @default(Active)
  firstName  String     @db.VarChar(255)
  lastName   String?    @db.VarChar(255)
  middleName String?    @db.VarChar(255)

  email               String    @unique @db.VarChar(60)
  phone               String?   @db.VarChar(60)
  phoneExt            String?   @db.VarChar(60)
  password            String    @db.VarChar(255)
  resetPasswordhash   String?   @db.VarChar(255)
  resetPasswordActive Boolean?
  resetPasswordExpire DateTime?
  photoUrl            String?   @db.VarChar(255)
  employeeId          String?   @db.VarChar(255)

  lastLoggedIn DateTime?

  // =========== COMMON ========== //
  createdBy String?  @db.VarChar(60)
  createdOn DateTime @default(now())

  modifiedBy String?  @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  deletedBy String?
  deletedOn DateTime?
  isDeleted Boolean
  // =========== COMMON ========== //

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.VarChar(60)

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.VarChar(60)
}

// ================ Employees // =============
enum EmployeeStatus {
  Active
  Inactive
  Notice
}

enum Gender {
  Male
  Female
  Other
}

model Employee {
  id                String         @id @default(uuid())
  firstName         String         @db.VarChar(255)
  middleName        String?        @db.VarChar(255)
  lastName          String         @db.VarChar(255)
  status            EmployeeStatus
  email             String         @unique @db.VarChar(60)
  phone             String?        @db.VarChar(60)
  gender            Gender
  dob               DateTime?
  picture           String?        @db.VarChar(255)
  hiredOn           DateTime?
  isMarried         Boolean?
  weddingAniversary DateTime?

  companyTitle   CompanyTitle @relation(fields: [companyTitleId], references: [name])
  companyTitleId String       @db.VarChar(60)
  team           Team         @relation(fields: [teamId], references: [name])
  teamId         String       @db.VarChar(60)
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  tenantId       String       @db.VarChar(60)

  createdOn  DateTime @default(now())
  createdBy  String?  @db.VarChar(60)
  modifiedBy String?  @db.VarChar(60)
  modifiedOn DateTime @updatedAt
}

model CompanyTitle {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(255)
  description String?    @db.VarChar(255)
  employees   Employee[]
}

model Team {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(255)
  description String?  @db.VarChar(255)
  isRemote    Boolean?

  employees Employee[]
}

// ===== Events Templates ====
model EventTemplate {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  image       String? @db.VarChar(60)
  instruction String?
  howTos      String?
  agenda      Json?

  eventCategoryId String        @db.VarChar(60)
  eventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id])

  events Event[]
}

model EventCategory {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  eventTypeId String    @db.VarChar(60)
  eventType   EventType @relation(fields: [eventTypeId], references: [id])

  eventTemplates EventTemplate[]
}

model EventType {
  id              String          @id @default(uuid())
  name            String          @db.VarChar(255)
  eventCategories EventCategory[]
}

// =============== Events ===============
// Seed - Pending, Active, Onhold
model EventStatus {
  id    String  @id @default(uuid())
  name  String  @unique @db.VarChar(255)
  Event Event[]
}

model Event {
  id String @id @default(uuid())

  name        String? @db.VarChar(255)
  description String? @db.VarChar(255)
  image       String? @db.VarChar(60)

  eventTemplateId String        @db.VarChar(60)
  eventTemplate   EventTemplate @relation(fields: [eventTemplateId], references: [id])

  eventStatusName String      @db.VarChar(255) // by default every created Event is pending
  eventStatus     EventStatus @relation(fields: [eventStatusName], references: [name])

  startAt          DateTime?
  location         String?
  endAt            DateTime?
  isActive         Boolean?  @default(true)
  isNotificationOn Boolean?  @default(true)
  allowPerformers  Boolean?  @default(true)
  allowRewards     Boolean?  @default(true)

  tenantId String @db.VarChar(60) // which Client is having this event

  attachments Attachment[]
  notes       Note[]
  audiences   Audience[]
  Participant Participant[]
}

enum ParticipantType {
  Host
  Guest
  Attendee
}

model Participant {
  id              String          @id @default(uuid())
  isGuest         Boolean?        @default(false)
  hasJoined       Boolean?        @default(false)
  participantType ParticipantType @default(Guest)
  isPerforming    Boolean?        @default(false)

  userId String @db.VarChar(255)

  eventId String @db.VarChar(60)
  event   Event  @relation(fields: [eventId], references: [id])
}

model Audience {
  id       String @id @default(uuid())
  teamName String @db.VarChar(255)

  eventId String @db.VarChar(60)
  event   Event  @relation(fields: [eventId], references: [id])
}

model Note {
  id     String @id @default(uuid())
  text   String @db.VarChar(255)
  userId String @db.VarChar(255)

  eventId String @db.VarChar(60)
  event   Event  @relation(fields: [eventId], references: [id])
}

model Attachment {
  id      String @id @default(uuid())
  name    String @db.VarChar(255)
  mimeTpe String @db.VarChar(255)
  key     String @db.VarChar(255)
  url     String @db.VarChar(255)

  eventId String @db.VarChar(60)
  event   Event  @relation(fields: [eventId], references: [id])
}
