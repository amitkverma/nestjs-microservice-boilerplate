// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Active
  Inactive
  Restricted
  Blocked
  Deleted
}

enum Status {
  Active
  Inactive
}

model AuthClients{
  id      String  @id @default(uuid())
  name    String  @db.VarChar(255)
  secrate String  @db.VarChar(255)
  accessTokenExpiration String @db.VarChar(10)
  refreshTokenExpiration String @db.VarChar(10)

  createdOn  DateTime @default(now())
  modifiedBy String? @db.VarChar(60)
  modifiedOn DateTime @updatedAt


  tenant Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique
}

model Tenant {
  id      String  @id @default(uuid())
  name    String  @db.VarChar(255)
  status  Status  @default(Active)
  website String? @db.VarChar(255)
  logoUrl String? @db.VarChar(255)
  address String? @db.VarChar(255)
  city    String? @db.VarChar(255)
  state   String? @db.VarChar(255)
  zip     String? @db.VarChar(255)

  createdOn  DateTime @default(now())
  modifiedBy String? @db.VarChar(60)
  modifiedOn DateTime @updatedAt
  
  users User[]
  authId AuthClients?
}

model Role {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String?

  createdOn  DateTime @default(now())
  modifiedBy String? @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  users User[]
}
model User {
  id         String     @id @default(uuid())
  status     UserStatus @default(Active)
  firstName  String     @db.VarChar(255)
  lastName   String?    @db.VarChar(255)
  middleName String?    @db.VarChar(255)

  email               String    @db.VarChar(60)
  phone               String?   @db.VarChar(60)
  phoneExt            String?   @db.VarChar(60)
  password            String    @db.VarChar(255)
  resetPasswordhash   String?   @db.VarChar(255)
  resetPasswordActive Boolean?
  resetPasswordExpire DateTime?
  photoUrl            String    @db.VarChar(255)
  employeeId          String    @db.VarChar(255)

  lastLoggedIn DateTime?

  // =========== COMMON ========== //
  createdBy String?
  createdOn DateTime @default(now())

  modifiedBy String? @db.VarChar(60)
  modifiedOn DateTime @updatedAt

  deletedBy String?
  deletedOn DateTime?
  // =========== COMMON ========== //


  role Role @relation(fields: [roleId], references: [id])
  roleId String 

  tenant Tenant @relation(fields: [tenantId], references: [id])
  tenantId String 
}


